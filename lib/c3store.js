// Generated by CoffeeScript 1.7.1
(function() {
  var Sequelize, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('lodash');

  Sequelize = require('sequelize');

  module.exports = function(Store) {
    var C3Store, checkError;
    checkError = function(callback) {
      return function(error) {
        if (error != null) {
          return typeof callback === "function" ? callback(error) : void 0;
        } else {
          return typeof callback === "function" ? callback() : void 0;
        }
      };
    };
    C3Store = (function(_super) {
      __extends(C3Store, _super);

      function C3Store(Session) {
        this.Session = Session;
      }

      C3Store.prototype.clear = function(callback) {
        return this.Session.sync({
          force: true
        }).done(checkError(callback));
      };

      C3Store.prototype.destroy = function(sid, callback) {
        return this.Session.destroy({
          sid: sid
        }).done(checkError(callback));
      };

      C3Store.prototype.length = function(callback) {
        return this.Session.count().done(function(error, count) {
          if (error != null) {
            return typeof callback === "function" ? callback(error) : void 0;
          } else {
            return typeof callback === "function" ? callback(count) : void 0;
          }
        });
      };

      C3Store.prototype.get = function(sid, callback) {
        var options;
        options = {
          where: {
            sid: sid
          },
          attributes: ['data']
        };
        return this.Session.find(options).done(function(error, session) {
          if (error != null) {
            return typeof callback === "function" ? callback(error) : void 0;
          } else if (session) {
            return typeof callback === "function" ? callback(null, JSON.parse(session.data)) : void 0;
          } else {
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      };

      C3Store.prototype.set = function(sid, session, callback) {
        var d, q;
        q = {
          sid: sid
        };
        d = {
          data: JSON.stringify(session)
        };
        return this.Session.findOrCreate(q, d).done(function(error, s) {
          if (error != null) {
            return typeof callback === "function" ? callback(error) : void 0;
          } else if (s.data !== d.data) {
            return s.updateAttributes(d).done(checkError(callback));
          } else {
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      };

      return C3Store;

    })(Store);
    return function(sequelize, name, model) {
      if (name == null) {
        name = 'Session';
      }
      if (model == null) {
        model = {};
      }
      return new C3Store(sequelize.define(name, _.extend(model, {
        sid: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
          validate: {
            notEmpty: true
          }
        },
        data: {
          type: Sequelize.TEXT,
          allowNull: true
        }
      })));
    };
  };

}).call(this);
